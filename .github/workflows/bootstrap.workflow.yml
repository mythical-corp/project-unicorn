# This CI/CD workflow creates a storage account in central subscription used for managing the terraform state backend and collection of flow logs (per tenant).
name: Bootstrap pipeline (Once per tenant)

on:
  workflow_dispatch:

defaults:
  run: 
    shell: bash

permissions:
  id-token: write
  contents: read

jobs:
  workflow:
    strategy:
      matrix:
        env: [tenant-A, tenant-B]
    runs-on: ubuntu-latest
    environment: ${{ matrix.env }}

    env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        TENANT_NAME: ${{ matrix.env }}
        LOCATION: northeurope

    steps:
        - name: Code checkout
          id: checkout
          uses: actions/checkout@v4

        - name: Terraform Setup
          id: tfsetup
          uses: hashicorp/setup-terraform@v3
          with:
            terraform_version: 1.8.5

        - name: Azure Login (central subscription)
          id: azlogin
          uses: azure/login@v2
          with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

          # First apply with LOCAL backend (creates storage account)
        - name: Terraform init (local state)
          id: tfinit
          working-directory: terraform/bootstrap_storage
          run: terraform init -input=false -backend=false
        
        - name: Terraform Apply (create resource group + storage account + tfstate container) - local state
          id: tfapply-bootstrap
          working-directory: terraform/bootstrap_storage
          env:
            TF_VAR_tenant_name: ${{ matrix.env }}
            TF_VAR_location: ${{ env.LOCATION }}
          run: terraform apply -auto-approve -input=false

        - name: Capture Terraform Outputs
          id: tfouts
          working-directory: terraform/bootstrap_storage
          run: |
            terraform output -json > tf_outputs.json
            sa_rg=$(jq -r '.storage_account_rg.value' tf_outputs.json)
            sa_name=$(jq -r '.storage_account_name.value' tf_outputs.json)
            sa_id=$(jq -r '.storage_account_id' tf_outputs.json)
            sa_container=$(jq -r '.storage_account_container' tf_outputs.json)

            echo "sa_rg=${sa_rg}" >> $GITHUB_OUTPUT
            echo "sa_name=${sa_name}" >> $GITHUB_OUTPUT
            echo "sa_id=${sa_id}" >> $GITHUB_OUTPUT
            echo "sa_container=${sa_container}" >> $GITHUB_OUTPUT
        
        - name: Migrate local state to Azure Backend
          id: tfmigrate
          working-directory: terraform/bootstrap_storage
          env:
            SA_NAME: ${{ steps.tfouts.outputs.sa_name }}
            SA_RG: ${{ steps.tfouts.outputs.sa_rg }}
            SA_CONTAINER: ${{ steps.tfouts.outputs.sa_container }}
            KEY: ${{ matrix.env }}.tfstate
          run: |
            terraform init \
              -migrate-state \
              -backend-config="resource_group_name=$SA_RG" \
              -backend-config="storage_account_name=$SA_NAME" \
              -backend-config="container_name=$SA_CONTAINER" \
              -backend-config="key=$KEY"
          
        - name: Save backend info into GitHub Environment Secrets
          id: ghsecrets
          env:
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          run: |
            gh secret set STORAGE_ACCOUNT_NAME --env ${{ matrix.env }} --body "${{ steps.tfouts.outputs.sa_name }}"
            gh secret set STORAGE_RG --env ${{ matrix.env }} --body "${{ steps.tfouts.outputs.sa_rg }}"
            gh secret set STORAGE_CONTAINER -env ${{ matrix.env }} --body "${{ steps.tfouts.outputs.sa_container }}"
            gh secret set STATE_FILE -env ${{ matrix.env }} --body "${{ matrix.env }}.tfstate"
                
            
        - name: Done
          run: echo "Bootstrap complete for ${{ matrix.env }} (tenant ${TENANT_NAME})"

       